{
    "notesFile": {
      "path": "docs/notes.md",
      "usage": [
        "This file tracks important aspects of the Slides2Video application design",
        "Reference and update this file as development progresses",
        "Maintain the structured format while adding new content"
      ],
      "updateRules": [
        "1. READ the notes file at the beginning of each development session",
        "2. UPDATE the relevant sections when making significant design decisions",
        "3. MAINTAIN the hierarchical structure when adding new content",
        "4. DATE all entries in the format [YYYY-MM-DD]",
        "5. KEEP entries concise and focused on rationale, not implementation details",
        "6. LINK to relevant code files or documentation when appropriate using relative paths",
        "7. MOVE completed TODOs to the relevant sections with implementation details",
        "8. DOCUMENT challenges and their solutions promptly"
      ],
      "contentGuidelines": [
        "Prioritize WHY over HOW in architectural decision documentation",
        "Document trade-offs considered in design decisions",
        "Record performance implications of significant decisions",
        "Note security considerations explicitly",
        "Track third-party dependencies and version constraints",
        "Document non-obvious design patterns or architectural approaches",
        "Note any deviations from the initial design document and their rationale"
      ],
      "format": {
        "newDecision": "[DATE]: Decision to [DECISION] because [RATIONALE].",
        "newChallenge": "**Challenge**: [DESCRIPTION]\n**Solution**: [SOLUTION]\n**Impact**: [IMPACT]",
        "newTodo": "[ ] [DESCRIPTION] - [PRIORITY: High/Medium/Low] [ESTIMATION]",
        "completedTodo": "[x] [DESCRIPTION] - Implemented in [FILE/COMPONENT]"
      }
    },
    "designDocument": {
      "path": "docs/Design.md",
      "usage": [
        "This document serves as the authoritative source of the application design",
        "Refer to this document for architectural decisions and component specifications",
        "Use as reference when implementing features to ensure adherence to the design"
      ],
      "referenceRules": [
        "1. CONSULT the design document before implementing any feature",
        "2. ALIGN implementation with the specifications in the design document",
        "3. NOTE any deviations from the design in the notes.md file with clear rationale",
        "4. UPDATE the design document only for major structural changes after consultation",
        "5. PRESERVE design decisions by referencing the document section in code comments"
      ]
    },
    "taskList": {
      "path": "docs/task_list.md",
      "usage": [
        "This file tracks all development tasks, their dependencies, and completion status",
        "Follow the task order based on dependencies to ensure smooth development",
        "Update task status as development progresses"
      ],
      "workflowRules": [
        "1. ALWAYS check the task list before starting new work",
        "2. ONLY work on tasks whose dependencies are marked as 'Complete'",
        "3. UPDATE task status to 'In Progress' when beginning work",
        "4. IMPLEMENT tests alongside functionality as indicated by test tasks (T prefix)",
        "5. RUN all tests at checkpoints (C prefix) before marking related tasks complete",
        "6. COMMIT code to repository after successfully passing checkpoint tests",
        "7. UPDATE task status to 'Complete' only after all tests pass",
        "8. DOCUMENT any blockers or issues in the notes.md file",
        "9. BREAK large tasks into smaller sub-tasks if they take more than 4 hours"
      ],
      "taskUpdateFormat": {
        "startTask": "Update status of task [ID] from 'Pending' to 'In Progress'",
        "completeTask": "Update status of task [ID] from 'In Progress' to 'Complete'",
        "addSubTask": "Add sub-task under [PARENT_ID]: | [PARENT_ID].[SUB_NUM] | [DESCRIPTION] | [PARENT_ID] | Pending | [REFERENCE] |",
        "taskNote": "Add note to task [ID]: [NOTE]"
      },
      "checkpointRules": [
        "1. ENSURE all tasks required for the checkpoint are complete",
        "2. RUN all associated tests and ensure they pass",
        "3. COMMIT code with message: 'Checkpoint [C#]: [CHECKPOINT DESCRIPTION]'",
        "4. CREATE a tag in the repository for the checkpoint",
        "5. UPDATE the checkpoint status to 'Complete' only after the above steps",
        "6. START a new conversation with Cursor after each checkpoint to keep context fresh"
      ]
    },
    "testingWorkflow": {
      "usage": [
        "Tests must be developed alongside functionality",
        "All tests must pass before marking a task complete",
        "Checkpoints serve as verification points for multiple related tasks"
      ],
      "rules": [
        "1. WRITE tests before or alongside the implementation of functionality",
        "2. RUN tests frequently during development",
        "3. ENSURE test coverage for all critical paths",
        "4. AUTOMATE tests where possible",
        "5. INCLUDE edge cases and error scenarios in tests",
        "6. UPDATE tests when requirements change"
      ],
      "testNamingConvention": "test_[function/module]_[scenario]_[expected_result]"
    },
  "context7Integration": {
    "usage": [
      "This configuration ensures Context7 is used by default for most coding tasks",
      "Context7 provides up-to-date documentation from official sources",
      "These rules help prevent outdated code suggestions and API usage"
    ],
    "behaviorRules": [
      "1. APPEND 'use context7' to code-related queries automatically",
      "2. PRIORITIZE current documentation over training data for libraries",
      "3. UTILIZE Context7 for all package implementation questions",
      "4. INFORM user when Context7 is being used to retrieve information",
      "5. ALLOW override with explicit 'no context7' statement"
    ],
    "applicationScopes": {
      "languages": [
	"JavaScript/TypeScript: Always use for npm packages",
	"Python: Use for libraries with significant version changes",
	"Any language: Use for rapidly evolving frameworks and libraries"
      ],
      "frameworks": [
	"Next.js",
	"React",
	"Vue",
	"Angular",
	"Tailwind",
	"Express",
	"Django",
	"Flask"
      ]
    },
    "activationTriggers": {
      "explicitTriggers": [
	"Any query containing 'use context7'",
	"Questions about library implementation",
	"Requests for code generation"
      ],
      "implicitTriggers": [
	"Queries ending with question marks",
	"Queries containing: implement, create, build, generate, code",
	"Requests related to API usage"
      ],
      "overrideTriggers": [
	"Queries containing 'no context7'",
	"Historical code analysis requests",
	"Theoretical language questions"
      ]
    },
    "priorityGuidelines": [
      "Always prefer Context7's up-to-date documentation over potentially outdated training data",
      "For rapidly evolving libraries (Next.js, React, etc.), Context7 should always be used",
      "When version-specific implementation is needed, Context7 is mandatory",
      "Balance performance with accuracy by using Context7 when most beneficial"
    ]
  }
}
